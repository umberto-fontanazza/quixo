import numpy as np                                      # Umbi so che non ti piace ma 
from random import choice
from oracle import Oracle as Ocl
from copy import deepcopy

import sys                                              # Umbi probabilmente neanche questo ti piace ma
sys.path.append('../')
from quixo.lib.game import Game, Move, Player

Position = tuple[int, int]
SLIDES = [Move.TOP, Move.BOTTOM, Move.LEFT, Move.RIGHT]
BORDER_POSITIONS = [(x, y) for x in range(5) for y in [0, 4]] + [(x, y) for x in [0, 4] for y in range(1, 4)]

def getPossibleMoves(board: np.ndarray, idx: int) -> list[tuple[Position, Move]]:
    """returns all the possible moves given a Game object
        that is, a list of tuples (Position, Move)"""
    possible = []
    for p in BORDER_POSITIONS:
        if board[p] == -1 or board[p] == idx:                                #if it is blank (-1) or mine (idx)
            if p[0] == 0:                                                    #in the top row
                if p[1] == 0:
                    possible += [(p, Move.BOTTOM), (p, Move.RIGHT)]
                elif p[1] == 4:
                    possible += [(p, Move.BOTTOM), (p, Move.LEFT)]    
                else:
                    possible += [(p, Move.BOTTOM), (p, Move.LEFT), (p, Move.RIGHT)]    
            elif p[0] == 4:
                if p[1] == 0:
                    possible += [(p, Move.TOP), (p, Move.RIGHT)]            #in the bottom row
                elif p[1] == 4:
                    possible += [(p, Move.TOP), (p, Move.LEFT)]    
                else:
                    possible += [(p, Move.TOP), (p, Move.LEFT), (p, Move.RIGHT)]
            elif p[1] == 0:                                                 #other rows (1,2,3) on left side
                possible += [(p, Move.TOP), (p, Move.BOTTOM), (p, Move.RIGHT)]
            else:                                                           #other rows on right side
                possible += [(p, Move.TOP), (p, Move.LEFT), (p, Move.BOTTOM)]     
    # i know, it is going to be evaluated again by game, but i think we could really save up some time
    assert len(possible) > 0
    return possible


class DelphiPlayer(Player):
    def __init__(self, tree_depth: int = 4) -> None:
        super().__init__()
        self.delphi: Ocl = Ocl() 
        self.episode: list[np.ndarray] = [np.ndarray]   
        self.depth = tree_depth if tree_depth % 2 == 0 else tree_depth + 1                  # should it be an even number? 

    # TODO: implement pruning
    def __max(self, board: np.ndarray, idx: int, curr_depth: int = 0) -> float:
        if curr_depth >= self.depth:
            return self.delphi.evaluate(board)
        future_boards: list[np.ndarray] = [self.__apply_move(board, p, idx) for p in getPossibleMoves(board, idx)]
        evaluated: list[float] = [self.__min(b, (idx + 1)%2, curr_depth + 1) for b in future_boards]
        return max(evaluated)

    def __min(self, board: np.ndarray, idx: int, curr_depth: int = 1) -> float:
        if curr_depth >= self.depth:                                                        # is this needed?
            return self.delphi.evaluate(board)
        future_boards: list[np.ndarray] = [self.__apply_move(board, p, idx) for p in getPossibleMoves(board, idx)]
        evaluated: list[float] = [self.__max(b, (idx + 1)%2, curr_depth + 1) for b in future_boards]
        return min(evaluated)
    
    def __apply_move(self, board: np.ndarray, move: tuple[Position, Move], idx: int) -> np.ndarray:
        """gives out a copy of the board after the move is applied
            given a board, a valid move and the player index 
            valid move should be one generated by getPossibleMoves"""
        boardcopy = deepcopy(board)
        boardcopy[move[0]] = idx                            # take the piece
        return self.__slide(boardcopy, move)                # slide the pieces

    # TODO: test, i copied from the game.py and adapted it
    def __slide(self, board: np.ndarray, move: tuple[Position, Move]):
        from_pos = move[0]
        slide = move[1]
        piece = board[from_pos]
        # if the player wants to slide it to the left
        if slide == Move.LEFT:
            # for each column starting from the column of the piece and moving to the left
            for i in range(from_pos[1], 0, -1):
            # copy the value contained in the same row and the previous column
                board[(from_pos[0], i)] = board[(
                    from_pos[0], i - 1)]
            # move the piece to the left
            board[(from_pos[0], 0)] = piece
        # if the player wants to slide it to the right
        elif slide == Move.RIGHT:
            # for each column starting from the column of the piece and moving to the right
            for i in range(from_pos[1], board.shape[1] - 1, 1):
                # copy the value contained in the same row and the following column
                board[(from_pos[0], i)] = board[(
                    from_pos[0], i + 1)]
            # move the piece to the right
            board[(from_pos[0], board.shape[1] - 1)] = piece
        # if the player wants to slide it upward
        elif slide == Move.TOP:
            # for each row starting from the row of the piece and going upward
            for i in range(from_pos[0], 0, -1):
                # copy the value contained in the same column and the previous row
                board[(i, from_pos[1])] = board[(
                    i - 1, from_pos[1])]
            # move the piece up
            board[(0, from_pos[1])] = piece
        # if the player wants to slide it downward
        elif slide == Move.BOTTOM:
            # for each row starting from the row of the piece and going downward
            for i in range(from_pos[0], board.shape[0] - 1, 1):
                # copy the value contained in the same column and the following row
                board[(i, from_pos[1])] = board[(
                    i + 1, from_pos[1])]
            # move the piece down
            board[(board.shape[0] - 1, from_pos[1])] = piece        
        return board

    # TODO: implement pruning
    # TODO: is the position to be given to Oracle the current one or the future one (after the move), or the one where i get after minmax? 
    def make_move(self, game: 'Game') -> tuple[tuple[int, int], Move]:
        idx: int = game.get_current_player()
        moves = [p for p in getPossibleMoves(game.get_board(), idx)]
        future_boards = [self.__apply_move(game.get_board(), p, idx) for p in moves]
        evaluated = [(b, self.__min(b, (idx + 1)%2), p) for b, p in zip(future_boards, moves)]
        chosen = max(evaluated, key = lambda move_qual: move_qual[1])
        self.episode.append(chosen[0])      #episode is used in feedback
        print(chosen)
        return chosen[2]
    
    def feedback(self, won: bool) -> None:
        """at the end of a game, gives feedback to the oracle"""
        for s in self.episode:
            self.delphi.train(s, won)
        self.episode = []    

    

# TODO: remove this
if __name__ == '__main__':
    # used for testing  

    dp = DelphiPlayer()
    g = Game()

    # informal test getPossibleMoves
    if False:
        b = g.get_board()
        for s in BORDER_POSITIONS:
            b[s] = 0
        b[0,0] = 1    
        print(b)
        print(len(getPossibleMoves(b, 1)))

    if True:
        g.play(dp, dp)
        g.print()
        print(g.check_winner())